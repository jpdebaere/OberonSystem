// Generated by OberonViewer 0.7.5 on 2020-01-27T01:00:45
// Then further developed manually by RK
#include "ObModules.h"
#include "ObSystem.h"
#include "ObEdit.h"
#include <memory>
using namespace Ob;

static owned_ptr<Modules> s_inst;


Modules* Modules::_inst()
{
	if( s_inst.get() == 0 )
		s_inst.reset( new Modules() );
	return s_inst.get();
}

void Modules::Load(_ValArray<char> name, Module& newmod_)
{
    importing = name;
    const QByteArray n = name.data();
    if( n == "System" || n == "Edit" )
    {
        imported = name;
        newmod_ = new ModDesc();
        newmod_->name = name;
        res = 0;
    }else
    {
        res = 1;
        newmod_ = 0;
    }
}

Modules::Command Modules::ThisCommand(Module mod, _ValArray<char> name)
{
    if( mod )
    {
        res = 0;
        const QByteArray mn = mod->name.data();
        const QByteArray cn = name.data();
        if( mn == "System" )
        {
            if( cn == "Open" )
                return System::Open;
            if( cn == "Close" )
                return System::Close;
            if( cn == "Copy" )
                return System::Copy;
            if( cn == "Grow" )
                return System::Grow;
            if( cn == "Clear" )
                return System::Clear;
            if( cn == "Recall" )
                return System::Recall;
            if( cn == "Watch" )
                return System::Watch;
            if( cn == "Collect" )
                return System::Collect;
            if( cn == "Directory" )
                return System::Directory;
            if( cn == "Free" )
                return System::Free;
            if( cn == "CopyFiles" )
                return System::CopyFiles;
            if( cn == "RenameFiles" )
                return System::RenameFiles;
            if( cn == "DeleteFiles" )
                return System::DeleteFiles;
            if( cn == "ShowModules" )
                return System::ShowModules;
            if( cn == "ShowCommands" )
                return System::ShowCommands;
        }else if( mn == "Edit" )
        {
            if( cn == "Open" )
                return Edit::Open;
            if( cn == "Recall" )
                return Edit::Recall;
            if( cn == "ChangeFont" )
                return Edit::ChangeFont;
            if( cn == "Store" )
                return Edit::Store;
            if( cn == "Search" )
                return Edit::Search;
            if( cn == "Locate" )
                return Edit::Locate;
        }
    }
    res = 5;
    return 0;
}

void Modules::Free(_ValArray<char> name)
{
    ; // NOP
}

Modules::Modules():res(0)
{
}

Modules::~Modules()
{
	s_inst.release();
}

