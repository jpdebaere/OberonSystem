// Generated by OberonViewer 0.7.5 on 2020-01-27T01:00:45
// Then further developed manually by RK
#include "ObMenuViewers.h"
#include <memory>
using namespace Ob;

static owned_ptr<MenuViewers> s_inst;

const int MenuViewers::extend;
const int MenuViewers::reduce;
const int MenuViewers::FrameColor = Display::white;

MenuViewers* MenuViewers::_inst()
{
	if( s_inst.get() == 0 )
    {
		s_inst.reset( new MenuViewers() );
        s_inst->_init();
    }
	return s_inst.get();
}

void MenuViewers::Copy(Viewer V, Viewer& V1)
{
	// VAR
	Display::Frame Menu;
	Display::Frame Main;
	Oberon::CopyMsg M;

	// BEGIN
	MenuViewers* _this = _inst();
	Menu = V->dsc;
	Main = V->dsc->next;
	V1 = new MenuViewers::ViewerDesc();
	V1 = V;
	V1->state = 0;
	M.F = 0;
	Menu->handle(Menu, M);
	V1->dsc = M.F;
	M.F = 0;
	Main->handle(Main, M);
	V1->dsc->next = M.F;
	// END
}

void MenuViewers::Draw(Viewers::Viewer V)
{
	// BEGIN
	MenuViewers* _this = _inst();
	Display::_inst()->ReplConst(_this->FrameColor, V->X, V->Y, 1, V->H, Display::_inst()->replace);
	Display::_inst()->ReplConst(_this->FrameColor, V->X + V->W - 1, V->Y, 1, V->H, Display::_inst()->replace);
	Display::_inst()->ReplConst(_this->FrameColor, V->X + 1, V->Y, V->W - 2, 1, Display::_inst()->replace);
	Display::_inst()->ReplConst(_this->FrameColor, V->X + 1, V->Y + V->H - 1, V->W - 2, 1, Display::_inst()->replace);
	// END
}

void MenuViewers::Extend(Viewer V, int newY_)
{
	// VAR
	int dH;

	// BEGIN
	MenuViewers* _this = _inst();
	dH = V->Y - newY_;
	if( dH > 0 )
	{
		Display::_inst()->ReplConst(Display::_inst()->black, V->X + 1, newY_ + 1, V->W - 2, dH, Display::_inst()->replace);
		Display::_inst()->ReplConst(_this->FrameColor, V->X, newY_, 1, dH, Display::_inst()->replace);
		Display::_inst()->ReplConst(_this->FrameColor, V->X + V->W - 1, newY_, 1, dH, Display::_inst()->replace);
		Display::_inst()->ReplConst(_this->FrameColor, V->X + 1, newY_, V->W - 2, 1, Display::_inst()->replace);
	}
	// END
}

void MenuViewers::Reduce(Viewer V, int newY_)
{
	// BEGIN
	MenuViewers* _this = _inst();
	Display::_inst()->ReplConst(_this->FrameColor, V->X + 1, newY_, V->W - 2, 1, Display::_inst()->replace);
	// END
}

void MenuViewers::Grow(Viewer V, int oldH)
{
	// VAR
	int dH;

	// BEGIN
	MenuViewers* _this = _inst();
	dH = V->H - oldH;
	if( dH > 0 )
	{
		Display::_inst()->ReplConst(_this->FrameColor, V->X, V->Y + oldH, 1, dH, Display::_inst()->replace);
		Display::_inst()->ReplConst(_this->FrameColor, V->X + V->W - 1, V->Y + oldH, 1, dH, Display::_inst()->replace);
		Display::_inst()->ReplConst(_this->FrameColor, V->X + 1, V->Y + V->H - 1, V->W - 2, 1, Display::_inst()->replace);
	}
	// END
}

void MenuViewers::Shrink(Viewer V, int newH_)
{
	// BEGIN
	MenuViewers* _this = _inst();
	Display::_inst()->ReplConst(_this->FrameColor, V->X + 1, V->Y + newH_ - 1, V->W - 2, 1, Display::_inst()->replace);
	// END
}

void MenuViewers::Adjust(Display::Frame F, int id, int dY, int Y, int H)
{
	// VAR
	ModifyMsg M;

	// BEGIN
	MenuViewers* _this = _inst();
	M.id = id;
	M.dY = dY;
	M.Y = Y;
	M.H = H;
	F->handle(F, M);
	F->Y = Y;
	F->H = H;
	// END
}

void MenuViewers::Restore(Viewer V)
{
	// VAR
	Display::Frame Menu;
	Display::Frame Main;

	// BEGIN
	MenuViewers* _this = _inst();
	Menu = V->dsc;
	Main = V->dsc->next;
	Oberon::_inst()->RemoveMarks(V->X, V->Y, V->W, V->H);
	_this->Draw(V);
	Menu->X = V->X + 1;
	Menu->Y = V->Y + V->H - 1;
	Menu->W = V->W - 2;
	Menu->H = 0;
	Main->X = V->X + 1;
	Main->Y = V->Y + V->H - V->menuH;
	Main->W = V->W - 2;
	Main->H = 0;
	if( V->H > V->menuH + 1 )
	{
		_this->Adjust(Menu, _this->extend, 0, V->Y + V->H - V->menuH, V->menuH - 1);
		_this->Adjust(Main, _this->extend, 0, V->Y + 1, V->H - V->menuH - 1);
	}else
		_this->Adjust(Menu, _this->extend, 0, V->Y + 1, V->H - 2);

	// END
}

void MenuViewers::Modify(Viewer V, int Y, int H)
{
	// VAR
	Display::Frame Menu;
	Display::Frame Main;

	// BEGIN
	MenuViewers* _this = _inst();
	Menu = V->dsc;
	Main = V->dsc->next;
	/* extend */
	if( Y < V->Y )
	{
		Oberon::_inst()->RemoveMarks(V->X, Y, V->W, V->Y - Y);
		_this->Extend(V, Y);
		if( H > V->menuH + 1 )
		{
			_this->Adjust(Menu, _this->extend, 0, Y + H - V->menuH, V->menuH - 1);
			_this->Adjust(Main, _this->extend, 0, Y + 1, H - V->menuH - 1);
		}else
			_this->Adjust(Menu, _this->extend, 0, Y + 1, H - 2);

	}else if( Y > V->Y )
	{
		/* reduce */
		Oberon::_inst()->RemoveMarks(V->X, V->Y, V->W, V->H);
		if( H > V->menuH + 1 )
		{
			_this->Adjust(Main, _this->reduce, 0, Y + 1, H - V->menuH - 1);
			_this->Adjust(Menu, _this->reduce, 0, Y + H - V->menuH, V->menuH - 1);
		}else
		{
			_this->Adjust(Main, _this->reduce, 0, Y + H - V->menuH, 0);
			_this->Adjust(Menu, _this->reduce, 0, Y + 1, H - 2);
		}
		_this->Reduce(V, Y);
	}
	// END
}

void MenuViewers::Change(Viewer V, int X, int Y, _Set Keys)
{
	// VAR
	Display::Frame Menu;
	Display::Frame Main;
	Viewers::Viewer V1;
	_Set keysum;
	int Y0;
	int dY;
	int H;

	// BEGIN
	MenuViewers* _this = _inst();
	/* Keys # {} */
	Menu = V->dsc;
	Main = V->dsc->next;
	Oberon::_inst()->DrawMouseArrow(X, Y);
	Display::_inst()->ReplConst(Display::_inst()->white, V->X + 1, V->Y + V->H - 1 - V->dsc->H, V->W - 2, V->dsc->H, Display::_inst()->invert);
	Y0 = Y;
	keysum = Keys;
	Input::_inst()->Mouse(Keys, X, Y);
	while( Keys != ( _Set() ) )
	{
		keysum = keysum + Keys;
		Oberon::_inst()->DrawMouseArrow(X, Y);
		Input::_inst()->Mouse(Keys, X, Y);
	}
	Display::_inst()->ReplConst(Display::_inst()->white, V->X + 1, V->Y + V->H - 1 - V->dsc->H, V->W - 2, V->dsc->H, Display::_inst()->invert);
	if( !(keysum.contains( 0 )) )
	{
		if( keysum.contains( 1 ) )
		{
			V1 = Viewers::_inst()->This(X, Y);
			if( (dynamic_cast<Viewer>(V1) != 0 ) && (Y > V1->Y + V1->H - V1->_to<Viewer>()->menuH - 2) )
				Y = V1->Y + V1->H;
			
			if( Y < V1->Y + V->menuH + 2 )
				Y = V1->Y + V->menuH + 2;
			
			Viewers::_inst()->Close(V);
			Viewers::_inst()->Open(V, X, Y);
			_this->Restore(V);
		}else
		{
			/* extend */
			if( Y > Y0 )
			{
				dY = Y - Y0;
				V1 = Viewers::_inst()->Next(V);
				if( V1->state > 1 )
				{
                    if( Viewer V = dynamic_cast<Viewer>(V1)  ){
                        if( V1->H < V->menuH + 2 )
							dY = 0;
                        else if( V1->H < V->menuH + 2 + dY )
                            dY = V1->H - V->menuH - 2;
						
					} else if( dynamic_cast<Viewers::Viewer>(V1) != 0  ){
                        if( V1->H < 1 + dY )
                            dY = V1->H - 1;
						
					} 
				}else if( V1->H < dY )
					dY = V1->H;
				
				Viewers::_inst()->Change(V, V->Y + V->H + dY);
				Oberon::_inst()->RemoveMarks(V->X, V->Y, V->W, V->H);
				_this->Grow(V, V->H - dY);
				if( V->H > V->menuH + 1 )
				{
					_this->Adjust(Menu, _this->extend, dY, V->Y + V->H - V->menuH, V->menuH - 1);
					_this->Adjust(Main, _this->extend, dY, V->Y + 1, V->H - V->menuH - 1);
				}else
				{
					/* V.H > 1 */
					_this->Adjust(Menu, _this->extend, dY, V->Y + 1, V->H - 2);
					_this->Adjust(Main, _this->extend, dY, V->Y + V->H - V->menuH, 0);
				}
			}else if( Y < Y0 )
			{
				/* reduce */
				dY = Y0 - Y;
				if( V->H >= V->menuH + 2 )
				{
					if( V->H < V->menuH + 2 + dY )
						dY = V->H - V->menuH - 2;
					
					Oberon::_inst()->RemoveMarks(V->X, V->Y, V->W, V->H);
					H = V->H - dY;
					_this->Adjust(Main, _this->reduce, dY, V->Y + 1, H - V->menuH - 1);
					_this->Adjust(Menu, _this->reduce, dY, V->Y + H - V->menuH, V->menuH - 1);
					_this->Shrink(V, H);
					Viewers::_inst()->Change(V, V->Y + H);
				}
			}
		}
	}
	// END
}

void MenuViewers::Suspend(Viewer V)
{
	// VAR
	Display::Frame Menu;
	Display::Frame Main;

	// BEGIN
	MenuViewers* _this = _inst();
	Menu = V->dsc;
	Main = V->dsc->next;
	_this->Adjust(Main, _this->reduce, 0, V->Y + V->H - V->menuH, 0);
	_this->Adjust(Menu, _this->reduce, 0, V->Y + V->H - 1, 0);
	// END
}

void MenuViewers::Handle(Display::Frame V, Display::FrameMsg& M)
{
	// VAR
	int X;
	int Y;
	Display::Frame Menu;
	Display::Frame Main;
	Viewer V1;

	// BEGIN
	MenuViewers* _this = _inst();
	Menu = V->dsc;
	Main = V->dsc->next;
    if( Oberon::InputMsg* MM = dynamic_cast<Oberon::InputMsg*>(&M)  ){
        if( MM->id == Oberon::_inst()->track )
		{
            X = MM->X;
            Y = MM->Y;
			if( Y < V->Y + 1 )
				Oberon::_inst()->DrawMouseArrow(X, Y);
			else if( Y < V->Y + V->H - V->_to<Viewer>()->menuH )
				Main->handle(Main, M);
			else if( Y < V->Y + V->H - V->_to<Viewer>()->menuH + 2 )
				Menu->handle(Menu, M);
			else if( Y < V->Y + V->H - 1 )
			{
                if( MM->keys.contains( 2 ) )
                    _this->Change(V->_to<Viewer>(), X, Y, MM->keys);
				else
					Menu->handle(Menu, M);

			}else
				Oberon::_inst()->DrawMouseArrow(X, Y);

		}else
		{
			Menu->handle(Menu, M);
			Main->handle(Main, M);
		}
    } else if( Oberon::ControlMsg* MM = dynamic_cast<Oberon::ControlMsg*>(&M)  ){
        if( MM->id == Oberon::_inst()->mark )
		{
            X = MM->X;
            Y = MM->Y;
			Oberon::_inst()->DrawMouseArrow(X, Y);
			Oberon::_inst()->DrawPointer(X, Y);
		}else
		{
			Menu->handle(Menu, M);
			Main->handle(Main, M);
		}
    } else if( Oberon::CopyMsg* MM = dynamic_cast<Oberon::CopyMsg*>(&M)  ){
		_this->Copy(V->_to<Viewer>(), V1);
        MM->F = V1;
    } else if( Viewers::ViewerMsg* MM = dynamic_cast<Viewers::ViewerMsg*>(&M) ){
        if( MM->id == Viewers::_inst()->restore )
			_this->Restore(V->_to<Viewer>());
        else if( MM->id == Viewers::_inst()->modify )
            _this->Modify(V->_to<Viewer>(), MM->Y, MM->H);
        else if( MM->id == Viewers::_inst()->suspend )
			_this->Suspend(V->_to<Viewer>());
		
    } else if( Display::FrameMsg* MM = dynamic_cast<Display::FrameMsg*>(&M) ){
		Menu->handle(Menu, M);
		Main->handle(Main, M);
	} 
	// END
}

MenuViewers::Viewer MenuViewers::New(Display::Frame Menu, Display::Frame Main, int menuH, int X, int Y)
{
    // VAR
    Viewer V;

    // BEGIN
    MenuViewers* _this = _inst();
    V = new MenuViewers::ViewerDesc();
    V->handle = _this->Handle;
    V->dsc = Menu;
    V->dsc->next = Main;
    V->menuH = menuH;
    Viewers::_inst()->Open(V, X, Y);
    _this->Restore(V);
    return V;
    // END
}

MenuViewers::MenuViewers()
{
    ; // empty statement
}

void MenuViewers::_init()
{
}

MenuViewers::~MenuViewers()
{
	s_inst.release();
}

